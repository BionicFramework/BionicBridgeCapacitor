(()=>{"use strict";var e={754:(e,t,n)=>{var r,i,o,a,s,c,u,l,d,h,f,p,v,y;n.r(t),n.d(t,{Accessibility:()=>A,AccessibilityPluginWeb:()=>L,ActionSheetOptionStyle:()=>h,App:()=>k,AppPluginWeb:()=>D,Browser:()=>O,BrowserPluginWeb:()=>R,Camera:()=>M,CameraDirection:()=>i,CameraPluginWeb:()=>F,CameraResultType:()=>o,CameraSource:()=>r,Capacitor:()=>w,Clipboard:()=>T,ClipboardPluginWeb:()=>N,Device:()=>G,DevicePluginWeb:()=>K,Filesystem:()=>U,FilesystemDirectory:()=>a,FilesystemEncoding:()=>s,FilesystemPluginWeb:()=>I,Geolocation:()=>H,GeolocationPluginWeb:()=>q,HapticsImpactStyle:()=>c,HapticsNotificationType:()=>u,KeyboardResize:()=>d,KeyboardStyle:()=>l,LocalNotifications:()=>z,LocalNotificationsPluginWeb:()=>V,Modals:()=>$,ModalsPluginWeb:()=>J,Motion:()=>Z,MotionPluginWeb:()=>Q,Network:()=>te,NetworkPluginWeb:()=>ee,PermissionType:()=>f,Permissions:()=>re,PermissionsPluginWeb:()=>ne,PhotosAlbumType:()=>p,Plugins:()=>g,Share:()=>Y,SharePluginWeb:()=>X,SplashScreen:()=>oe,SplashScreenPluginWeb:()=>ie,StatusBarAnimation:()=>y,StatusBarStyle:()=>v,Storage:()=>se,StoragePluginWeb:()=>ae,Toast:()=>ue,ToastPluginWeb:()=>ce,WebPlugin:()=>S,WebPluginRegistry:()=>b,WebPlugins:()=>P,mergeWebPlugin:()=>x,mergeWebPlugins:()=>B,registerWebPlugin:()=>le}),function(e){e.Prompt="PROMPT",e.Camera="CAMERA",e.Photos="PHOTOS"}(r||(r={})),function(e){e.Rear="REAR",e.Front="FRONT"}(i||(i={})),function(e){e.Uri="uri",e.Base64="base64",e.DataUrl="dataUrl"}(o||(o={})),function(e){e.Documents="DOCUMENTS",e.Data="DATA",e.Cache="CACHE",e.External="EXTERNAL",e.ExternalStorage="EXTERNAL_STORAGE"}(a||(a={})),function(e){e.UTF8="utf8",e.ASCII="ascii",e.UTF16="utf16"}(s||(s={})),function(e){e.Heavy="HEAVY",e.Medium="MEDIUM",e.Light="LIGHT"}(c||(c={})),function(e){e.SUCCESS="SUCCESS",e.WARNING="WARNING",e.ERROR="ERROR"}(u||(u={})),function(e){e.Dark="DARK",e.Light="LIGHT"}(l||(l={})),function(e){e.Body="body",e.Ionic="ionic",e.Native="native",e.None="none"}(d||(d={})),function(e){e.Default="DEFAULT",e.Destructive="DESTRUCTIVE",e.Cancel="CANCEL"}(h||(h={})),function(e){e.Camera="camera",e.Photos="photos",e.Geolocation="geolocation",e.Notifications="notifications",e.ClipboardRead="clipboard-read",e.ClipboardWrite="clipboard-write",e.Microphone="microphone"}(f||(f={})),function(e){e.Smart="smart",e.Shared="shared",e.User="user"}(p||(p={})),function(e){e.Dark="DARK",e.Light="LIGHT"}(v||(v={})),function(e){e.None="NONE",e.Slide="SLIDE",e.Fade="FADE"}(y||(y={}));var m=function(){function e(){var e=this;this.platform="web",this.isNative=!1,this.Plugins={},"undefined"!=typeof Proxy&&(this.Plugins=new Proxy(this.Plugins,{get:function(t,n){if(void 0===t[n]){var r=e;return new Proxy({},{get:function(e,t){return void 0===e[t]?r.pluginMethodNoop.bind(r,e,t,n):e[t]}})}return t[n]}}))}return e.prototype.pluginMethodNoop=function(e,t,n){return Promise.reject(n+" does not have web implementation.")},e.prototype.getPlatform=function(){return this.platform},e.prototype.isPluginAvailable=function(e){return this.Plugins.hasOwnProperty(e)},e.prototype.convertFileSrc=function(e){return e},e.prototype.handleError=function(e){console.error(e)},e}(),w=function(e){return e.Capacitor=e.Capacitor||new m}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:{}),g=w.Plugins,b=function(){function e(){this.plugins={},this.loadedPlugins={}}return e.prototype.addPlugin=function(e){this.plugins[e.config.name]=e},e.prototype.getPlugin=function(e){return this.plugins[e]},e.prototype.loadPlugin=function(e){var t=this.getPlugin(e);t?t.load():console.error("Unable to load web plugin "+e+", no such plugin found.")},e.prototype.getPlugins=function(){var e=[];for(var t in this.plugins)e.push(this.plugins[t]);return e},e}(),P=new b,S=function(){function e(e,t){this.config=e,this.loaded=!1,this.listeners={},this.windowListeners={},t?t.addPlugin(this):P.addPlugin(this)}return e.prototype.addWindowListener=function(e){window.addEventListener(e.windowEventName,e.handler),e.registered=!0},e.prototype.removeWindowListener=function(e){e&&(window.removeEventListener(e.windowEventName,e.handler),e.registered=!1)},e.prototype.addListener=function(e,t){var n=this;this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t);var r=this.windowListeners[e];return r&&!r.registered&&this.addWindowListener(r),{remove:function(){n.removeListener(e,t)}}},e.prototype.removeListener=function(e,t){var n=this.listeners[e];if(n){var r=n.indexOf(t);this.listeners[e].splice(r,1),this.listeners[e].length||this.removeWindowListener(this.windowListeners[e])}},e.prototype.removeAllListeners=function(){for(var e in this.listeners={},this.windowListeners)this.removeWindowListener(this.windowListeners[e]);this.windowListeners={}},e.prototype.notifyListeners=function(e,t){var n=this.listeners[e];n&&n.forEach((function(e){return e(t)}))},e.prototype.hasListeners=function(e){return!!this.listeners[e].length},e.prototype.registerWindowListener=function(e,t){var n=this;this.windowListeners[t]={registered:!1,windowEventName:e,pluginEventName:t,handler:function(e){n.notifyListeners(t,e)}}},e.prototype.requestPermissions=function(){return Capacitor.isNative?Capacitor.nativePromise(this.config.name,"requestPermissions",{}):Promise.resolve({results:[]})},e.prototype.load=function(){this.loaded=!0},e}(),B=function(e){for(var t=0,n=P.getPlugins();t<n.length;t++){var r=n[t];x(e,r)}},x=function(e,t){e.hasOwnProperty(t.config.name)&&!function(e){return e.config.platforms&&e.config.platforms.indexOf(Capacitor.platform)>=0}(t)||(e[t.config.name]=t)},E=function(e,t){return(E=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function _(e,t){function n(){this.constructor=e}E(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}function C(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))}function j(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}var L=function(e){function t(){return e.call(this,{name:"Accessibility",platforms:["web"]})||this}return _(t,e),t.prototype.isScreenReaderEnabled=function(){throw new Error("Feature not available in the browser")},t.prototype.speak=function(e){if(!("speechSynthesis"in window))return Promise.reject("Browser does not support the Speech Synthesis API");var t=new SpeechSynthesisUtterance(e.value);return e.language&&(t.lang=e.language),window.speechSynthesis.speak(t),Promise.resolve()},t}(S),A=new L,D=function(e){function t(){var t=e.call(this,{name:"App",platforms:["web"]})||this;return"undefined"!=typeof document&&document.addEventListener("visibilitychange",t.handleVisibilityChange.bind(t),!1),t}return _(t,e),t.prototype.exitApp=function(){throw new Error("Method not implemented.")},t.prototype.canOpenUrl=function(e){return Promise.resolve({value:!0})},t.prototype.openUrl=function(e){return Promise.resolve({completed:!0})},t.prototype.getLaunchUrl=function(){return Promise.resolve({url:""})},t.prototype.getState=function(){return Promise.resolve({isActive:!0!==document.hidden})},t.prototype.handleVisibilityChange=function(){var e={isActive:!0!==document.hidden};this.notifyListeners("appStateChange",e)},t}(S),k=new D,R=function(e){function t(){return e.call(this,{name:"Browser",platforms:["web"]})||this}return _(t,e),t.prototype.open=function(e){return C(this,void 0,void 0,(function(){return j(this,(function(t){return this._lastWindow=window.open(e.url,e.windowName||"_blank"),[2,Promise.resolve()]}))}))},t.prototype.prefetch=function(e){return C(this,void 0,void 0,(function(){return j(this,(function(e){return[2,Promise.resolve()]}))}))},t.prototype.close=function(){return C(this,void 0,void 0,(function(){return j(this,(function(e){return this._lastWindow&&this._lastWindow.close(),[2,Promise.resolve()]}))}))},t}(S),O=new R,F=function(e){function t(){return e.call(this,{name:"Camera",platforms:["web"]})||this}return _(t,e),t.prototype.getPhoto=function(e){return C(this,void 0,void 0,(function(){var t=this;return j(this,(function(n){return[2,new Promise((function(n,r){return C(t,void 0,void 0,(function(){var t,i=this;return j(this,(function(o){switch(o.label){case 0:return e.webUseInput?(this.fileInputExperience(e,n),[3,7]):[3,1];case 1:if(!customElements.get("pwa-camera-modal"))return[3,6];t=document.createElement("pwa-camera-modal"),document.body.appendChild(t),o.label=2;case 2:return o.trys.push([2,4,,5]),[4,t.componentOnReady()];case 3:return o.sent(),t.addEventListener("onPhoto",(function(o){return C(i,void 0,void 0,(function(){var i,a;return j(this,(function(s){switch(s.label){case 0:return null!==(i=o.detail)?[3,1]:(r("User cancelled photos app"),[3,4]);case 1:return i instanceof Error?(r(i.message),[3,4]):[3,2];case 2:return a=n,[4,this._getCameraPhoto(i,e)];case 3:a.apply(void 0,[s.sent()]),s.label=4;case 4:return t.dismiss(),document.body.removeChild(t),[2]}}))}))})),t.present(),[3,5];case 4:return o.sent(),this.fileInputExperience(e,n),[3,5];case 5:return[3,7];case 6:console.error("Unable to load PWA Element 'pwa-camera-modal'. See the docs: https://capacitorjs.com/docs/pwa-elements."),this.fileInputExperience(e,n),o.label=7;case 7:return[2]}}))}))}))]}))}))},t.prototype.fileInputExperience=function(e,t){var n=document.querySelector("#_capacitor-camera-input"),a=function(){n.parentNode&&n.parentNode.removeChild(n)};n||((n=document.createElement("input")).id="_capacitor-camera-input",n.type="file",document.body.appendChild(n)),n.accept="image/*",n.capture=!0,e.source===r.Photos||e.source===r.Prompt?n.removeAttribute("capture"):e.direction===i.Front?n.capture="user":e.direction===i.Rear&&(n.capture="environment"),n.addEventListener("change",(function(r){var i=n.files[0],s="jpeg";if("image/png"===i.type?s="png":"image/gif"===i.type&&(s="gif"),e.resultType===o.DataUrl||e.resultType===o.Base64){var c=new FileReader;c.addEventListener("load",(function(){if(e.resultType===o.DataUrl)t({dataUrl:c.result,format:s});else if(e.resultType===o.Base64){var n=c.result.split(",")[1];t({base64String:n,format:s})}a()})),c.readAsDataURL(i)}else t({webPath:URL.createObjectURL(i),format:s}),a()})),n.click()},t.prototype._getCameraPhoto=function(e,t){return new Promise((function(n,r){var i=new FileReader,a=e.type.split("/")[1];t.resultType===o.Uri?n({webPath:URL.createObjectURL(e),format:a}):(i.readAsDataURL(e),i.onloadend=function(){var e=i.result;t.resultType===o.DataUrl?n({dataUrl:e,format:a}):n({base64String:e.split(",")[1],format:a})},i.onerror=function(e){r(e)})}))},t}(S),M=new F,N=function(e){function t(){return e.call(this,{name:"Clipboard",platforms:["web"]})||this}return _(t,e),t.prototype.write=function(e){return C(this,void 0,void 0,(function(){var t,n,r;return j(this,(function(i){switch(i.label){case 0:return navigator.clipboard?void 0!==e.string||e.url?navigator.clipboard.writeText?[4,navigator.clipboard.writeText(void 0!==e.string?e.string:e.url)]:[2,Promise.reject("Writting to clipboard not supported in this browser")]:[3,2]:[2,Promise.reject("Clipboard API not available in this browser")];case 1:return i.sent(),[3,10];case 2:if(!e.image)return[3,9];if(!navigator.clipboard.write)return[2,Promise.reject("Setting images not supported in this browser")];i.label=3;case 3:return i.trys.push([3,7,,8]),[4,fetch(e.image)];case 4:return[4,i.sent().blob()];case 5:return t=i.sent(),n=new ClipboardItem(((r={})[t.type]=t,r)),[4,navigator.clipboard.write([n])];case 6:return i.sent(),[3,8];case 7:return i.sent(),[2,Promise.reject("Failed to write image")];case 8:return[3,10];case 9:return[2,Promise.reject("Nothing to write")];case 10:return[2,Promise.resolve()]}}))}))},t.prototype.read=function(){return C(this,void 0,void 0,(function(){var e,t,n,r;return j(this,(function(i){switch(i.label){case 0:return navigator.clipboard?navigator.clipboard.read?[3,1]:navigator.clipboard.readText?[2,this.readText()]:[2,Promise.reject("Reading from clipboard not supported in this browser")]:[2,Promise.reject("Clipboard API not available in this browser")];case 1:return i.trys.push([1,5,,6]),[4,navigator.clipboard.read()];case 2:return e=i.sent(),t=e[0].types[0],[4,e[0].getType(t)];case 3:return n=i.sent(),[4,this._getBlobData(n,t)];case 4:return r=i.sent(),[2,Promise.resolve({value:r,type:t})];case 5:return i.sent(),[2,this.readText()];case 6:return[2]}}))}))},t.prototype.readText=function(){return C(this,void 0,void 0,(function(){var e;return j(this,(function(t){switch(t.label){case 0:return[4,navigator.clipboard.readText()];case 1:return e=t.sent(),[2,Promise.resolve({value:e,type:"text/plain"})]}}))}))},t.prototype._getBlobData=function(e,t){return new Promise((function(n,r){var i=new FileReader;t.includes("image")?i.readAsDataURL(e):i.readAsText(e),i.onloadend=function(){var e=i.result;n(e)},i.onerror=function(e){r(e)}}))},t}(S),T=new N,I=function(e){function t(){var t=e.call(this,{name:"Filesystem",platforms:["web"]})||this;return t.DEFAULT_DIRECTORY=a.Data,t.DB_VERSION=1,t.DB_NAME="Disc",t._writeCmds=["add","put","delete"],t}return _(t,e),t.prototype.initDb=function(){return C(this,void 0,void 0,(function(){var e=this;return j(this,(function(n){if(void 0!==this._db)return[2,this._db];if(!("indexedDB"in window))throw new Error("This browser doesn't support IndexedDB");return[2,new Promise((function(n,r){var i=indexedDB.open(e.DB_NAME,e.DB_VERSION);i.onupgradeneeded=t.doUpgrade,i.onsuccess=function(){e._db=i.result,n(i.result)},i.onerror=function(){return r(i.error)},i.onblocked=function(){console.warn("db blocked")}}))]}))}))},t.doUpgrade=function(e){var t=e.target.result;switch(e.oldVersion){case 0:case 1:default:t.objectStoreNames.contains("FileStorage")&&t.deleteObjectStore("FileStorage"),t.createObjectStore("FileStorage",{keyPath:"path"}).createIndex("by_folder","folder")}},t.prototype.dbRequest=function(e,t){return C(this,void 0,void 0,(function(){var n;return j(this,(function(r){return n=-1!==this._writeCmds.indexOf(e)?"readwrite":"readonly",[2,this.initDb().then((function(r){return new Promise((function(i,o){var a=r.transaction(["FileStorage"],n).objectStore("FileStorage"),s=a[e].apply(a,t);s.onsuccess=function(){return i(s.result)},s.onerror=function(){return o(s.error)}}))}))]}))}))},t.prototype.dbIndexRequest=function(e,t,n){return C(this,void 0,void 0,(function(){var r;return j(this,(function(i){return r=-1!==this._writeCmds.indexOf(t)?"readwrite":"readonly",[2,this.initDb().then((function(i){return new Promise((function(o,a){var s=i.transaction(["FileStorage"],r).objectStore("FileStorage").index(e),c=s[t].apply(s,n);c.onsuccess=function(){return o(c.result)},c.onerror=function(){return a(c.error)}}))}))]}))}))},t.prototype.getPath=function(e,t){e=e||this.DEFAULT_DIRECTORY;var n=void 0!==t?t.replace(/^[/]+|[/]+$/g,""):"",r="/"+e;return""!==t&&(r+="/"+n),r},t.prototype.clear=function(){return C(this,void 0,void 0,(function(){var e;return j(this,(function(t){switch(t.label){case 0:return[4,this.initDb()];case 1:return e=t.sent(),e.transaction(["FileStorage"],"readwrite").objectStore("FileStorage").clear(),[2,{}]}}))}))},t.prototype.readFile=function(e){return C(this,void 0,void 0,(function(){var t,n;return j(this,(function(r){switch(r.label){case 0:return t=this.getPath(e.directory,e.path),[4,this.dbRequest("get",[t])];case 1:if(void 0===(n=r.sent()))throw Error("File does not exist.");return[2,{data:n.content}]}}))}))},t.prototype.writeFile=function(e){return C(this,void 0,void 0,(function(){var t,n,r,i,o,a,s,c,u,l;return j(this,(function(d){switch(d.label){case 0:return t=this.getPath(e.directory,e.path),n=e.data,r=e.recursive,[4,this.dbRequest("get",[t])];case 1:if((i=d.sent())&&"directory"===i.type)throw"The supplied path is a directory.";return o=e.encoding,a=t.substr(0,t.lastIndexOf("/")),[4,this.dbRequest("get",[a])];case 2:return void 0!==d.sent()||-1===(s=a.indexOf("/",1))?[3,4]:(c=a.substr(s),[4,this.mkdir({path:c,directory:e.directory,recursive:r})]);case 3:d.sent(),d.label=4;case 4:return u=Date.now(),l={path:t,folder:a,type:"file",size:n.length,ctime:u,mtime:u,content:!o&&n.indexOf(",")>=0?n.split(",")[1]:n},[4,this.dbRequest("put",[l])];case 5:return d.sent(),[2,{uri:l.path}]}}))}))},t.prototype.appendFile=function(e){return C(this,void 0,void 0,(function(){var t,n,r,i,o,a,s,c,u;return j(this,(function(l){switch(l.label){case 0:return t=this.getPath(e.directory,e.path),n=e.data,r=t.substr(0,t.lastIndexOf("/")),i=Date.now(),o=i,[4,this.dbRequest("get",[t])];case 1:if((a=l.sent())&&"directory"===a.type)throw"The supplied path is a directory.";return[4,this.dbRequest("get",[r])];case 2:return void 0!==l.sent()||-1===(s=r.indexOf("/",1))?[3,4]:(c=r.substr(s),[4,this.mkdir({path:c,directory:e.directory,recursive:!0})]);case 3:l.sent(),l.label=4;case 4:return void 0!==a&&(n=a.content+n,o=a.ctime),u={path:t,folder:r,type:"file",size:n.length,ctime:o,mtime:i,content:n},[4,this.dbRequest("put",[u])];case 5:return l.sent(),[2,{}]}}))}))},t.prototype.deleteFile=function(e){return C(this,void 0,void 0,(function(){var t;return j(this,(function(n){switch(n.label){case 0:return t=this.getPath(e.directory,e.path),[4,this.dbRequest("get",[t])];case 1:if(void 0===n.sent())throw Error("File does not exist.");return[4,this.dbIndexRequest("by_folder","getAllKeys",[IDBKeyRange.only(t)])];case 2:if(0!==n.sent().length)throw Error("Folder is not empty.");return[4,this.dbRequest("delete",[t])];case 3:return n.sent(),[2,{}]}}))}))},t.prototype.mkdir=function(e){return C(this,void 0,void 0,(function(){var t,n,r,i,o,a,s,c,u;return j(this,(function(l){switch(l.label){case 0:return t=this.getPath(e.directory,e.path),n=e.recursive,r=t.substr(0,t.lastIndexOf("/")),i=(t.match(/\//g)||[]).length,[4,this.dbRequest("get",[r])];case 1:return o=l.sent(),[4,this.dbRequest("get",[t])];case 2:if(a=l.sent(),1===i)throw Error("Cannot create Root directory");if(void 0!==a)throw Error("Current directory does already exist.");if(!n&&2!==i&&void 0===o)throw Error("Parent directory must exist");return n&&2!==i&&void 0===o?(s=r.substr(r.indexOf("/",1)),[4,this.mkdir({path:s,directory:e.directory,recursive:n})]):[3,4];case 3:l.sent(),l.label=4;case 4:return c=Date.now(),u={path:t,folder:r,type:"directory",size:0,ctime:c,mtime:c},[4,this.dbRequest("put",[u])];case 5:return l.sent(),[2,{}]}}))}))},t.prototype.rmdir=function(e){return C(this,void 0,void 0,(function(){var t,n,r,i,o,a,s,c,u,l;return j(this,(function(d){switch(d.label){case 0:return t=e.path,n=e.directory,r=e.recursive,i=this.getPath(n,t),[4,this.dbRequest("get",[i])];case 1:if(void 0===(o=d.sent()))throw Error("Folder does not exist.");if("directory"!==o.type)throw Error("Requested path is not a directory");return[4,this.readdir({path:t,directory:n})];case 2:if(0!==(a=d.sent()).files.length&&!r)throw Error("Folder is not empty");s=0,c=a.files,d.label=3;case 3:return s<c.length?(u=c[s],l=t+"/"+u,[4,this.stat({path:l,directory:n})]):[3,9];case 4:return"file"!==d.sent().type?[3,6]:[4,this.deleteFile({path:l,directory:n})];case 5:return d.sent(),[3,8];case 6:return[4,this.rmdir({path:l,directory:n,recursive:r})];case 7:d.sent(),d.label=8;case 8:return s++,[3,3];case 9:return[4,this.dbRequest("delete",[i])];case 10:return d.sent(),[2,{}]}}))}))},t.prototype.readdir=function(e){return C(this,void 0,void 0,(function(){var t,n;return j(this,(function(r){switch(r.label){case 0:return t=this.getPath(e.directory,e.path),[4,this.dbRequest("get",[t])];case 1:if(n=r.sent(),""!==e.path&&void 0===n)throw Error("Folder does not exist.");return[4,this.dbIndexRequest("by_folder","getAllKeys",[IDBKeyRange.only(t)])];case 2:return[2,{files:r.sent().map((function(e){return e.substring(t.length+1)}))}]}}))}))},t.prototype.getUri=function(e){return C(this,void 0,void 0,(function(){var t,n;return j(this,(function(r){switch(r.label){case 0:return t=this.getPath(e.directory,e.path),[4,this.dbRequest("get",[t])];case 1:return void 0!==(n=r.sent())?[3,3]:[4,this.dbRequest("get",[t+"/"])];case 2:n=r.sent(),r.label=3;case 3:if(void 0===n)throw Error("Entry does not exist.");return[2,{uri:n.path}]}}))}))},t.prototype.stat=function(e){return C(this,void 0,void 0,(function(){var t,n;return j(this,(function(r){switch(r.label){case 0:return t=this.getPath(e.directory,e.path),[4,this.dbRequest("get",[t])];case 1:return void 0!==(n=r.sent())?[3,3]:[4,this.dbRequest("get",[t+"/"])];case 2:n=r.sent(),r.label=3;case 3:if(void 0===n)throw Error("Entry does not exist.");return[2,{type:n.type,size:n.size,ctime:n.ctime,mtime:n.mtime,uri:n.path}]}}))}))},t.prototype.rename=function(e){return C(this,void 0,void 0,(function(){return j(this,(function(t){return[2,this._copy(e,!0)]}))}))},t.prototype.copy=function(e){return C(this,void 0,void 0,(function(){return j(this,(function(t){return[2,this._copy(e,!1)]}))}))},t.prototype._copy=function(e,t){return void 0===t&&(t=!1),C(this,void 0,void 0,(function(){var n,r,i,o,a,s,c,u,l,d,h,f,p,v,y,m,w=this;return j(this,(function(g){switch(g.label){case 0:if(n=e.to,r=e.from,i=e.directory,o=e.toDirectory,!n||!r)throw Error("Both to and from must be provided");if(o||(o=i),a=this.getPath(i,r),s=this.getPath(o,n),a===s)return[2,{}];if(s.startsWith(a))throw Error("To path cannot contain the from path");g.label=1;case 1:return g.trys.push([1,3,,6]),[4,this.stat({path:n,directory:o})];case 2:return c=g.sent(),[3,6];case 3:return g.sent(),(u=n.split("/")).pop(),l=u.join("/"),u.length>0?[4,this.stat({path:l,directory:o})]:[3,5];case 4:if("directory"!==g.sent().type)throw new Error("Parent directory of the to path is a file");g.label=5;case 5:return[3,6];case 6:if(c&&"directory"===c.type)throw new Error("Cannot overwrite a directory with a file");return[4,this.stat({path:r,directory:i})];case 7:switch(d=g.sent(),h=function(e,t,n){return C(w,void 0,void 0,(function(){var r,i;return j(this,(function(a){switch(a.label){case 0:return r=this.getPath(o,e),[4,this.dbRequest("get",[r])];case 1:return(i=a.sent()).ctime=t,i.mtime=n,[4,this.dbRequest("put",[i])];case 2:return a.sent(),[2]}}))}))},d.type){case"file":return[3,8];case"directory":return[3,15]}return[3,28];case 8:return[4,this.readFile({path:r,directory:i})];case 9:return f=g.sent(),t?[4,this.deleteFile({path:r,directory:i})]:[3,11];case 10:g.sent(),g.label=11;case 11:return[4,this.writeFile({path:n,directory:o,data:f.data})];case 12:return g.sent(),t?[4,h(n,d.ctime,d.mtime)]:[3,14];case 13:g.sent(),g.label=14;case 14:return[2,{}];case 15:if(c)throw Error("Cannot move a directory over an existing object");g.label=16;case 16:return g.trys.push([16,20,,21]),[4,this.mkdir({path:n,directory:o,recursive:!1})];case 17:return g.sent(),t?[4,h(n,d.ctime,d.mtime)]:[3,19];case 18:g.sent(),g.label=19;case 19:return[3,21];case 20:return g.sent(),[3,21];case 21:return[4,this.readdir({path:r,directory:i})];case 22:p=g.sent().files,v=0,y=p,g.label=23;case 23:return v<y.length?(m=y[v],[4,this._copy({from:r+"/"+m,to:n+"/"+m,directory:i,toDirectory:o},t)]):[3,26];case 24:g.sent(),g.label=25;case 25:return v++,[3,23];case 26:return t?[4,this.rmdir({path:r,directory:i})]:[3,28];case 27:g.sent(),g.label=28;case 28:return[2,{}]}}))}))},t._debug=!0,t}(S),U=new I,W=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return t.forEach((function(t){if(t&&"object"==typeof t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})),e},q=function(e){function t(){return e.call(this,{name:"Geolocation",platforms:["web"]})||this}return _(t,e),t.prototype.getCurrentPosition=function(e){var t=this;return new Promise((function(n,r){return t.requestPermissions().then((function(t){window.navigator.geolocation.getCurrentPosition((function(e){n(e)}),(function(e){r(e)}),W({enableHighAccuracy:!0,timeout:1e4,maximumAge:0},e))}))}))},t.prototype.watchPosition=function(e,t){return""+window.navigator.geolocation.watchPosition((function(e){t(e)}),(function(e){t(null,e)}),W({enableHighAccuracy:!0,timeout:1e4,maximumAge:0},e))},t.prototype.clearWatch=function(e){return window.navigator.geolocation.clearWatch(parseInt(e.id,10)),Promise.resolve()},t}(S),H=new q,K=function(e){function t(){return e.call(this,{name:"Device",platforms:["web"]})||this}return _(t,e),t.prototype.getInfo=function(){return C(this,void 0,void 0,(function(){var e,t;return j(this,(function(n){return e=navigator.userAgent,t=this.parseUa(e),[2,Promise.resolve({model:t.model,platform:"web",appVersion:"",appBuild:"",appId:"",appName:"",operatingSystem:t.operatingSystem,osVersion:t.osVersion,manufacturer:navigator.vendor,isVirtual:!1,uuid:this.getUid()})]}))}))},t.prototype.getBatteryInfo=function(){return C(this,void 0,void 0,(function(){var e;return j(this,(function(t){switch(t.label){case 0:e={},t.label=1;case 1:return t.trys.push([1,3,,4]),[4,navigator.getBattery()];case 2:return e=t.sent(),[3,4];case 3:return t.sent(),[3,4];case 4:return[2,Promise.resolve({batteryLevel:e.level,isCharging:e.charging})]}}))}))},t.prototype.getLanguageCode=function(){return C(this,void 0,void 0,(function(){return j(this,(function(e){return[2,{value:navigator.language}]}))}))},t.prototype.parseUa=function(e){var t={},n=e.indexOf("(")+1,r=e.indexOf(") AppleWebKit");-1!==e.indexOf(") Gecko")&&(r=e.indexOf(") Gecko"));var i=e.substring(n,r);if(-1!==e.indexOf("Android"))t.model=i.replace("; wv","").split("; ").pop().split(" Build")[0],t.osVersion=i.split("; ")[1];else if(t.model=i.split("; ")[0],navigator.oscpu)t.osVersion=navigator.oscpu;else if(-1!==e.indexOf("Windows"))t.osVersion=i;else{var o=i.split("; ").pop().replace(" like Mac OS X","").split(" ");t.osVersion=o[o.length-1].replace(/_/g,".")}return/android/i.test(e)?t.operatingSystem="android":/iPad|iPhone|iPod/.test(e)&&!window.MSStream?t.operatingSystem="ios":/Win/.test(e)?t.operatingSystem="windows":/Mac/i.test(e)?t.operatingSystem="mac":t.operatingSystem="unknown",t},t.prototype.getUid=function(){var e=window.localStorage.getItem("_capuid");return e||(e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})),window.localStorage.setItem("_capuid",e),e)},t}(S),G=new K,V=function(e){function t(){var t=e.call(this,{name:"LocalNotifications",platforms:["web"]})||this;return t.pending=[],t}return _(t,e),t.prototype.createChannel=function(e){throw new Error("Feature not available in the browser. "+e.id)},t.prototype.deleteChannel=function(e){throw new Error("Feature not available in the browser. "+e.id)},t.prototype.listChannels=function(){throw new Error("Feature not available in the browser")},t.prototype.sendPending=function(){var e=this,t=[],n=+new Date;this.pending.forEach((function(r){r.schedule&&r.schedule.at&&+r.schedule.at<=n&&(e.buildNotification(r),t.push(r))})),console.log("Sent pending, removing",t),this.pending=this.pending.filter((function(e){return!t.find((function(t){return t===e}))}))},t.prototype.sendNotification=function(e){var t=this,n=e;if(e.schedule&&e.schedule.at){var r=+e.schedule.at-+new Date;return this.pending.push(n),void setTimeout((function(){t.sendPending()}),r)}this.buildNotification(e)},t.prototype.buildNotification=function(e){var t=e;return new Notification(t.title,{body:t.body})},t.prototype.schedule=function(e){var t=this,n=[];return e.notifications.forEach((function(e){n.push(t.sendNotification(e))})),Promise.resolve({notifications:e.notifications.map((function(e){return{id:""+e.id}}))})},t.prototype.getPending=function(){return Promise.resolve({notifications:this.pending.map((function(e){return{id:""+e.id}}))})},t.prototype.registerActionTypes=function(e){throw new Error("Method not implemented.")},t.prototype.cancel=function(e){return console.log("Cancel these",e),this.pending=this.pending.filter((function(t){return!e.notifications.find((function(e){return e.id===""+t.id}))})),Promise.resolve()},t.prototype.areEnabled=function(){return Promise.resolve({value:"granted"===Notification.permission})},t.prototype.requestPermission=function(){return new Promise((function(e){Notification.requestPermission((function(t){var n=!0;"denied"!==t&&"default"!==t||(n=!1),e({granted:n})}))}))},t.prototype.requestPermissions=function(){return new Promise((function(e,t){Notification.requestPermission((function(n){"denied"!==n&&"default"!==n?e({results:[n]}):t(n)}))}))},t}(S),z=new V,X=function(e){function t(){return e.call(this,{name:"Share",platforms:["web"]})||this}return _(t,e),t.prototype.share=function(e){return navigator.share?navigator.share({title:e.title,text:e.text,url:e.url}):Promise.reject("Web Share API not available")},t}(S),Y=new X,J=function(e){function t(){return e.call(this,{name:"Modals",platforms:["web"]})||this}return _(t,e),t.prototype.alert=function(e){return C(this,void 0,void 0,(function(){return j(this,(function(t){return window.alert(e.message),[2,Promise.resolve()]}))}))},t.prototype.prompt=function(e){return C(this,void 0,void 0,(function(){var t;return j(this,(function(n){return t=window.prompt(e.message,e.inputText||""),[2,Promise.resolve({value:t,cancelled:null===t})]}))}))},t.prototype.confirm=function(e){return C(this,void 0,void 0,(function(){var t;return j(this,(function(n){return t=window.confirm(e.message),[2,Promise.resolve({value:t})]}))}))},t.prototype.showActions=function(e){return C(this,void 0,void 0,(function(){var t=this;return j(this,(function(n){return[2,new Promise((function(n,r){return C(t,void 0,void 0,(function(){var t,r=this;return j(this,(function(i){return(t=document.querySelector("pwa-action-sheet"))||(t=document.createElement("pwa-action-sheet"),document.body.appendChild(t)),t.header=e.title,t.cancelable=!1,t.options=e.options,t.addEventListener("onSelection",(function(e){return C(r,void 0,void 0,(function(){var t;return j(this,(function(r){return t=e.detail,n({index:t}),[2]}))}))})),[2]}))}))}))]}))}))},t}(S),$=new J,Q=function(e){function t(){var t=e.call(this,{name:"Motion"})||this;return t.registerWindowListener("devicemotion","accel"),t.registerWindowListener("deviceorientation","orientation"),t}return _(t,e),t}(S),Z=new Q,ee=function(e){function t(){var t=e.call(this,{name:"Network",platforms:["web"]})||this;return t.listenerFunction=null,t}return _(t,e),t.prototype.getStatus=function(){return new Promise((function(e,t){if(window.navigator){var n=window.navigator.onLine,r=window.navigator.connection||window.navigator.mozConnection||window.navigator.webkitConnection,i=r?r.type||r.effectiveType:"wifi";e({connected:n,connectionType:n?i:"none"})}else t("Network info not available")}))},t.prototype.addListener=function(e,t){var n=window.navigator.connection||window.navigator.mozConnection||window.navigator.webkitConnection,r=n?n.type||n.effectiveType:"wifi",i=t.bind(this,{connected:!0,connectionType:r}),o=t.bind(this,{connected:!1,connectionType:"none"});if(0===e.localeCompare("networkStatusChange"))return window.addEventListener("online",i),window.addEventListener("offline",o),{remove:function(){window.removeEventListener("online",i),window.removeEventListener("offline",o)}}},t}(S),te=new ee,ne=function(e){function t(){return e.call(this,{name:"Permissions"})||this}return _(t,e),t.prototype.query=function(e){return C(this,void 0,void 0,(function(){var t,n;return j(this,(function(r){switch(r.label){case 0:return(t=window.navigator).permissions?(n=e.name===f.Photos?"camera":e.name,[4,t.permissions.query({name:n})]):[2,Promise.reject("This browser does not support the Permissions API")];case 1:return[2,{state:r.sent().state}]}}))}))},t}(S),re=new ne,ie=function(e){function t(){return e.call(this,{name:"SplashScreen",platforms:["web"]})||this}return _(t,e),t.prototype.show=function(e,t){return Promise.resolve()},t.prototype.hide=function(e,t){return Promise.resolve()},t}(S),oe=new ie,ae=function(e){function t(){var t=e.call(this,{name:"Storage",platforms:["web"]})||this;return t.KEY_PREFIX="_cap_",t}return _(t,e),t.prototype.get=function(e){var t=this;return new Promise((function(n,r){n({value:window.localStorage.getItem(t.makeKey(e.key))})}))},t.prototype.set=function(e){var t=this;return new Promise((function(n,r){window.localStorage.setItem(t.makeKey(e.key),e.value),n()}))},t.prototype.remove=function(e){var t=this;return new Promise((function(n,r){window.localStorage.removeItem(t.makeKey(e.key)),n()}))},t.prototype.keys=function(){var e=this;return new Promise((function(t,n){t({keys:Object.keys(localStorage).filter((function(t){return e.isKey(t)})).map((function(t){return e.getKey(t)}))})}))},t.prototype.clear=function(){var e=this;return new Promise((function(t,n){Object.keys(localStorage).filter((function(t){return e.isKey(t)})).forEach((function(e){return window.localStorage.removeItem(e)})),t()}))},t.prototype.makeKey=function(e){return this.KEY_PREFIX+e},t.prototype.isKey=function(e){return 0===e.indexOf(this.KEY_PREFIX)},t.prototype.getKey=function(e){return e.substr(this.KEY_PREFIX.length)},t}(S),se=new ae,ce=function(e){function t(){return e.call(this,{name:"Toast",platforms:["web"]})||this}return _(t,e),t.prototype.show=function(e){return C(this,void 0,void 0,(function(){var t,n;return j(this,(function(r){return t=2e3,e.duration&&(t="long"===e.duration?3500:2e3),(n=document.createElement("pwa-toast")).duration=t,n.message=e.text,document.body.appendChild(n),[2]}))}))},t}(S),ue=new ce;B(g);var le=function(e){x(g,e)}},152:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.AccessibilityBridge=void 0;const i=n(754),{Accessibility:o}=i.Plugins;class a{constructor(){this.id=null,this.handler=null}remove(){this.handler&&(this.handler.remove(),this.handler=null)}accessibilityScreenReaderStateChangeListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportAccessibilityScreenReaderStateChange",this.id,!(!e||!e.value)&&e.value)}}class s{isScreenReaderEnabled(){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("App not available.");const e=yield o.isScreenReaderEnabled();return!!e&&e.value}))}speak(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("App not available.");yield o.speak(e)}))}addListener(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("App not available.");try{const t=new a;return t.id=e,t.handler=yield o.addListener("accessibilityScreenReaderStateChange",t.accessibilityScreenReaderStateChangeListener.bind(t)),s.watchers.set(e,t),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}removeListener(e){return r(this,void 0,void 0,(function*(){try{const t=s.watchers.get(e);return t&&t.handler&&(t.remove(),s.watchers.delete(e)),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}}t.AccessibilityBridge=s,s.watchers=new Map},214:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.AppBridge=void 0;const i=n(754),{App:o}=i.Plugins;class a{constructor(){this.id=null,this.handler=null}remove(){this.handler&&(this.handler.remove(),this.handler=null)}appStateChangeListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportAppStateChange",this.id,e)}appUrlOpenListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportAppUrlOpen",this.id,e)}appRestoredResultListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportAppRestoredResult",this.id,e)}backButtonListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportBackButton",this.id,e)}}class s{canOpenUrl(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("App not available.");const t=yield o.canOpenUrl({url:e});return!!t&&t.value}))}exitApp(){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("App not available.");yield o.exitApp()}))}getLaunchUrl(){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("App not available.");const e=yield o.getLaunchUrl();return e&&e.url?e.url:null}))}openUrl(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("App not available.");const t=yield o.openUrl({url:e});return!!t&&t.completed}))}addAppStateChangeListener(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("App not available.");try{const t=new a;return t.id=e,t.handler=yield o.addListener("appStateChange",t.appStateChangeListener.bind(t)),s.watchers.set(e,t),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}addAppUrlOpenListener(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("App not available.");try{const t=new a;return t.id=e,t.handler=yield o.addListener("appUrlOpen",t.appUrlOpenListener.bind(t)),s.watchers.set(e,t),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}addAppRestoredResultListener(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("App not available.");try{const t=new a;return t.id=e,t.handler=yield o.addListener("appRestoredResult",t.appRestoredResultListener.bind(t)),s.watchers.set(e,t),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}addBackButtonListener(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("App not available.");try{const t=new a;return t.id=e,t.handler=yield o.addListener("backButton",t.backButtonListener.bind(t)),s.watchers.set(e,t),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}removeListener(e){return r(this,void 0,void 0,(function*(){try{const t=s.watchers.get(e);return t&&t.handler&&(t.remove(),s.watchers.delete(e)),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}}t.AppBridge=s,s.watchers=new Map},636:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.BackgroundTaskBridge=void 0;const i=n(754),{BackgroundTask:o}=i.Plugins;class a{constructor(){this.id=null}beforeExitCallback(){DotNet.invokeMethodAsync("BionicBridgeCapacitor","NotifyBeforeExit",this.id)}}class s{beforeExit(){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("BackgroundTask not available.");try{const e=new a,t=yield o.beforeExit(e.beforeExitCallback.bind(e));return e.id=t,s.watchers.set(t,e),new Promise((e=>e(t)))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}finish(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("BackgroundTask not available.");try{return s.watchers.delete(e),yield o.finish({taskId:e})}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}}t.BackgroundTaskBridge=s,s.watchers=new Map},101:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.BrowserBridge=void 0;const i=n(754),o=n(211),{Browser:a}=i.Plugins;class s{constructor(e=null,t=null){this.id=e,this.handle=t}remove(){this.handle&&(this.handle.remove(),this.handle=null)}reportFromBrowserListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportFromBrowserListener",this.id,JSON.stringify(e))}}class c{close(){return r(this,void 0,void 0,(function*(){return a?yield a.close():Promise.reject("Browser not available.")}))}open(e){return r(this,void 0,void 0,(function*(){return a?(yield o.Deployment.isWeb())?void window.open(e.url,e.windowName):yield a.open(e):Promise.reject("Browser not available.")}))}prefetch(e){return r(this,void 0,void 0,(function*(){return a?yield a.prefetch(e):Promise.reject("Browser not available.")}))}listenToBrowserFinished(e){return r(this,void 0,void 0,(function*(){if(!a)return Promise.reject("Browser not available.");if(c.watchers.has(e))return Promise.reject("ID already in use.");try{const t=new s(e);return t.handle=a.addListener("browserFinished",t.reportFromBrowserListener),c.watchers.set(e,t),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}listenToBrowserPageLoaded(e){return r(this,void 0,void 0,(function*(){if(!a)return Promise.reject("Browser not available.");if(c.watchers.has(e))return Promise.reject("ID already in use.");try{const t=new s(e);return t.handle=a.addListener("browserPageLoaded",t.reportFromBrowserListener),c.watchers.set(e,t),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}removeListener(e){return r(this,void 0,void 0,(function*(){try{const t=c.watchers.get(e);return t&&t.handle&&(t.remove(),c.watchers.delete(e)),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}}t.BrowserBridge=c,c.watchers=new Map},972:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.CameraBridge=void 0;const i=n(754),{Camera:o}=i.Plugins;t.CameraBridge=class{getPhoto(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Camera not available.");try{const t=yield o.getPhoto(e);return new Promise((e=>e(t)))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}}},525:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ClipboardBridge=void 0;const i=n(754),{Clipboard:o}=i.Plugins;t.ClipboardBridge=class{read(e){return r(this,void 0,void 0,(function*(){return o?yield o.read():Promise.reject("Clipboard not available.")}))}write(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Clipboard not available.");yield o.write({string:e.str,image:e.image,url:e.url,label:e.label})}))}static translateClipboardType(e){switch(e){case 1:return"url";case 2:return"image";default:return"string"}}}},991:function(e,t){var n=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ConsoleBridge=void 0,t.ConsoleBridge=class{log(e){return n(this,void 0,void 0,(function*(){yield console.log(e)}))}}},211:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.Deployment=void 0;const i=n(754),{Device:o}=i.Plugins;class a{static isWeb(){return a.is("web")}static isAndroid(){return a.is("android")}static isIOS(){return a.is("ios")}static is(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.resolve(!1);try{const t=yield o.getInfo();return Promise.resolve(t.platform===e)}catch(e){return Promise.reject(e.message)}}))}}t.Deployment=a},233:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.DeviceBridge=void 0;const i=n(754),{Device:o}=i.Plugins;t.DeviceBridge=class{getInfo(){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Device not available.");try{const e=yield o.getInfo();return new Promise((t=>t(e)))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}}},959:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.FilesystemBridge=void 0;const i=n(754),{Filesystem:o}=i.Plugins;class a{appendFile(e){return r(this,void 0,void 0,(function*(){return o?(e.encoding=a.translateEncode(e.encoding),e.directory=a.translateDirectory(e.directory),yield o.appendFile(e)):Promise.reject("Filesystem not available.")}))}deleteFile(e){return r(this,void 0,void 0,(function*(){return o?(e.directory=a.translateDirectory(e.directory),yield o.deleteFile(e)):Promise.reject("Filesystem not available.")}))}getUri(e){return r(this,void 0,void 0,(function*(){return o?(e.directory=a.translateDirectory(e.directory),yield o.getUri(e)):Promise.reject("Filesystem not available.")}))}mkdir(e){return r(this,void 0,void 0,(function*(){return o?(e.directory=a.translateDirectory(e.directory),yield o.mkdir(e)):Promise.reject("Filesystem not available.")}))}readFile(e){return r(this,void 0,void 0,(function*(){return o?(e.encoding=a.translateEncode(e.encoding),e.directory=a.translateDirectory(e.directory),yield o.readFile(e)):Promise.reject("Filesystem not available.")}))}readdir(e){return r(this,void 0,void 0,(function*(){return o?(e.directory=a.translateDirectory(e.directory),yield o.readdir(e)):Promise.reject("Filesystem not available.")}))}rmdir(e){return r(this,void 0,void 0,(function*(){return o?(e.directory=a.translateDirectory(e.directory),yield o.rmdir(e)):Promise.reject("Filesystem not available.")}))}stat(e){return r(this,void 0,void 0,(function*(){return o?(e.directory=a.translateDirectory(e.directory),yield o.stat(e)):Promise.reject("Filesystem not available.")}))}writeFile(e){return r(this,void 0,void 0,(function*(){return console.log(e),o?(e.encoding=a.translateEncode(e.encoding),e.directory=a.translateDirectory(e.directory),yield o.writeFile(e)):Promise.reject("Filesystem not available.")}))}static translateEncode(e){switch(e){case 1:return i.FilesystemEncoding.ASCII;case 2:return i.FilesystemEncoding.UTF16;default:return i.FilesystemEncoding.UTF8}}static translateDirectory(e){switch(e){case 1:return i.FilesystemDirectory.Documents;case 2:return i.FilesystemDirectory.Data;case 3:return i.FilesystemDirectory.Cache;case 4:return i.FilesystemDirectory.External;case 5:return i.FilesystemDirectory.ExternalStorage;default:return i.FilesystemDirectory.Documents}}}t.FilesystemBridge=a},802:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.GeolocationBridge=void 0;const i=n(754),{Geolocation:o}=i.Plugins;class a{constructor(){this.id=null}geolocationCallback(e,t){t?console.log(`Got position error: ${t.message?t.message:t}`):DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportNewPosition",this.id,new c(e))}}class s{constructor(e){this.latitude=e.latitude?e.latitude:null,this.longitude=e.longitude?e.longitude:null,this.accuracy=e.accuracy?e.accuracy:null,this.altitude=e.altitude?e.altitude:null,this.altitudeAccuracy=e.altitudeAcuracy?e.altitudeAcuracy:null,this.speed=e.speed?e.speed:null,this.heading=e.heading?e.heading:null}}class c{constructor(e){this.timestamp=e.timestamp?e.timestamp:null,this.coords=new s(e.coords)}}class u{clearWatch(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Geolocation not available.");try{return yield o.clearWatch({id:e}),u.watchers.delete(e),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}getCurrentPosition(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Geolocation not available.");try{const e=new c(yield o.getCurrentPosition());return new Promise((t=>t(e)))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}watchPosition(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Geolocation not available.");try{const t=new a,n=yield o.watchPosition(e,t.geolocationCallback.bind(t));return t.id=n,u.watchers.set(n,t),new Promise((e=>e(n)))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}}t.GeolocationBridge=u,u.watchers=new Map},717:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.HapticsBridge=void 0;const i=n(754),{Haptics:o}=i.Plugins;t.HapticsBridge=class{vibrate(){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Haptics not available.");yield o.vibrate()}))}impact(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Haptics not available.");let t=i.HapticsImpactStyle.Light;switch(e){case 0:t=i.HapticsImpactStyle.Heavy;break;case 1:t=i.HapticsImpactStyle.Medium}yield o.impact({style:t})}))}selectionStart(){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Haptics not available.");yield o.selectionStart()}))}selectionChanged(){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Haptics not available.");yield o.selectionChanged()}))}selectionEnd(){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Haptics not available.");yield o.selectionEnd()}))}}},815:(e,t,n)=>{const r=n(101),i=n(989),o=n(991),a=n(972),s=n(233),c=n(802),u=n(312),l=n(705),d=n(831),h=n(125),f=n(853),p=n(440),v=n(908),y=n(510),m=n(717),w=n(959),g=n(525),b=n(636),P=n(214),S=n(152);var B;!function(e){const t="BionicBridge",n={Capacitor:{Accessibility:new S.AccessibilityBridge,App:new P.AppBridge,BackgroundTask:new b.BackgroundTaskBridge,Browser:new r.BrowserBridge,Camera:new a.CameraBridge,Clipboard:new g.ClipboardBridge,Console:new o.ConsoleBridge,Device:new s.DeviceBridge,Filesystem:new w.FilesystemBridge,Geolocation:new c.GeolocationBridge,Haptics:new m.HapticsBridge,Keyboard:new u.KeyboardBridge,Modals:new l.ModalsBridge,Motion:new y.MotionBridge,Network:new v.NetworkBridge,Share:new h.ShareBridge,SplashScreen:new p.SplashScreenBridge,StatusBar:new f.StatusBarBridge,Storage:new d.StorageBridge,Toast:new i.ToastBridge}};e.initialize=function(){"undefined"==typeof window||window[t]?window[t]=Object.assign(Object.assign({},window[t]),n):window[t]=Object.assign({},n)}}(B||(B={})),B.initialize()},312:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.KeyboardBridge=void 0;const i=n(754),{Keyboard:o}=i.Plugins;t.KeyboardBridge=class{show(){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Keyboard not available.");try{return yield o.show(),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}hide(){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Keyboard not available.");try{return yield o.hide(),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}setAccessoryBarVisible(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Keyboard not available.");try{return yield o.setAccessoryBarVisible({isVisible:e}),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}registerEventListeners(){return r(this,void 0,void 0,(function*(){if(!o||!window)return Promise.reject("Keyboard not available.");try{return window.addEventListener("keyboardWillShow",(e=>{DotNet.invokeMethodAsync("BionicBridgeCapacitor","KeyboardWillShow",JSON.stringify(e))})),window.addEventListener("keyboardDidShow",(e=>{DotNet.invokeMethodAsync("BionicBridgeCapacitor","KeyboardDidShow",JSON.stringify(e))})),window.addEventListener("keyboardWillHide",(()=>{DotNet.invokeMethodAsync("BionicBridgeCapacitor","KeyboardWillHide")})),window.addEventListener("keyboardDidHide",(()=>{DotNet.invokeMethodAsync("BionicBridgeCapacitor","KeyboardDidHide")})),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}}},705:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ModalsBridge=void 0;const i=n(754),{Modals:o}=i.Plugins;t.ModalsBridge=class{alert(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Modals not available.");try{return yield o.alert(e)}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}confirm(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Modals not available.");try{return yield o.confirm(e)}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}prompt(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Modals not available.");try{return yield o.prompt(e)}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}showActions(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Modals not available.");try{return yield o.showActions(e)}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}}},510:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.MotionBridge=void 0;const i=n(754),o=n(211),{Motion:a}=i.Plugins;class s{constructor(){this.id=null,this.handler=null,this.type="deviceorientation"}remove(){this.handler&&(this.handler.remove(),this.handler=null)}motionAccelListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportMotionAccel",this.id,{acceleration:e.acceleration?{x:e.acceleration.x,y:e.acceleration.y,z:e.acceleration.z}:null,accelerationIncludingGravity:e.accelerationIncludingGravity?{x:e.accelerationIncludingGravity.x,y:e.accelerationIncludingGravity.y,z:e.accelerationIncludingGravity.z}:null,rotationRate:e.rotationRate?{alpha:e.rotationRate.alpha,beta:e.rotationRate.beta,gamma:e.rotationRate.gamma}:null,interval:e.interval})}motionOrientationListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportMotionOrientation",this.id,{alpha:e.alpha,beta:e.beta,gamma:e.gamma})}}function c(){const e="string"==typeof window.orientation?parseInt(window.orientation):window.orientation;DotNet.invokeMethodAsync("BionicBridgeCapacitor","OnOrientationChange",e)}class u{getOrientation(){return r(this,void 0,void 0,(function*(){const e="string"==typeof window.orientation?parseInt(window.orientation):window.orientation;return Promise.resolve(e)}))}startOrientationChangeListener(){return r(this,void 0,void 0,(function*(){addEventListener("orientationchange",c)}))}stopOrientationChangeListener(){return r(this,void 0,void 0,(function*(){removeEventListener("orientationchange",c)}))}addAccelListener(e){return r(this,void 0,void 0,(function*(){try{const t=new s;if(t.id=e,t.eventHandler=t.motionAccelListener.bind(t),yield o.Deployment.isWeb()){if(t.type="devicemotion",!DeviceMotionEvent)return new Promise(((e,t)=>t("Detected web deployment but DeviceMotionEvent is not available")));addEventListener("devicemotion",t.eventHandler,!1)}else{if(!a)return Promise.reject("Motion not available.");t.handler=yield a.addListener("accel",t.eventHandler)}return u.watchers.set(e,t),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}addOrientationListener(e){return r(this,void 0,void 0,(function*(){try{const t=new s;if(t.id=e,t.eventHandler=t.motionOrientationListener.bind(t),yield o.Deployment.isWeb()){if(t.type="deviceorientation",!DeviceOrientationEvent)return new Promise(((e,t)=>t("Detected web deployment but DeviceOrientationEvent is not available")));addEventListener("deviceorientation",t.eventHandler,!1)}else{if(!a)return Promise.reject("Motion not available.");t.handler=yield a.addListener("orientation",t.eventHandler)}return u.watchers.set(e,t),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}removeListener(e){return r(this,void 0,void 0,(function*(){try{const t=u.watchers.get(e);return t&&((yield o.Deployment.isWeb())?removeEventListener(t.type,t.eventHandler):t.remove(),u.watchers.delete(e)),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}}t.MotionBridge=u,u.watchers=new Map},908:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.NetworkBridge=void 0;const i=n(754),{Network:o}=i.Plugins;class a{constructor(){this.id=null,this.handler=null}remove(){this.handler&&(this.handler.remove(),this.handler=null)}networkListener(e){DotNet.invokeMethodAsync("BionicBridgeCapacitor","ReportNetworkStatus",this.id,e)}}class s{getStatus(){return r(this,void 0,void 0,(function*(){return o?yield o.getStatus():Promise.reject("Network not available.")}))}addListener(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Network not available.");try{const t=new a;return t.id=e,t.handler=yield o.addListener("networkStatusChange",t.networkListener.bind(t)),s.watchers.set(e,t),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}removeListener(e){return r(this,void 0,void 0,(function*(){try{const t=s.watchers.get(e);return t&&t.handler&&(t.remove(),s.watchers.delete(e)),new Promise((e=>e()))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}}t.NetworkBridge=s,s.watchers=new Map},125:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ShareBridge=void 0;const i=n(754),{Share:o}=i.Plugins;t.ShareBridge=class{share(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Share not available.");yield o.share(e)}))}}},440:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.SplashScreenBridge=void 0;const i=n(754),{SplashScreen:o}=i.Plugins;t.SplashScreenBridge=class{show(e){return r(this,void 0,void 0,(function*(){return o?yield o.show(e):Promise.reject("SplashScreen not available.")}))}hide(e){return r(this,void 0,void 0,(function*(){return o?yield o.hide(e):Promise.reject("SplashScreen not available.")}))}}},853:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.StatusBarBridge=void 0;const i=n(754),{StatusBar:o}=i.Plugins;t.StatusBarBridge=class{show(){return r(this,void 0,void 0,(function*(){return o?yield o.show():Promise.reject("StatusBar not available.")}))}hide(){return r(this,void 0,void 0,(function*(){return o?yield o.hide():Promise.reject("StatusBar not available.")}))}setBackgroundColor(e){return r(this,void 0,void 0,(function*(){return o?yield o.setBackgroundColor({color:e}):Promise.reject("StatusBar not available.")}))}setStyle(e){return r(this,void 0,void 0,(function*(){return o?yield o.setStyle({style:0===e?i.StatusBarStyle.Dark:i.StatusBarStyle.Light}):Promise.reject("StatusBar not available.")}))}}},831:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.StorageBridge=void 0;const i=n(754),{Storage:o}=i.Plugins;t.StorageBridge=class{clear(){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Storage not available.");try{return yield o.clear()}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}get(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Storage not available.");try{const t=yield o.get({key:e});return new Promise((e=>e(null!==t&&null!==t.value?JSON.parse(t.value):null)))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}set(e,t){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Storage not available.");try{return yield o.set({key:e,value:JSON.stringify(t)})}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}keys(){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Storage not available.");try{const e=yield o.keys();return new Promise((t=>t(e&&e.keys?e.keys:[])))}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}remove(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Storage not available.");try{return yield o.remove({key:e})}catch(e){return new Promise(((t,n)=>n(e.message)))}}))}}},989:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{c(r.next(e))}catch(e){o(e)}}function s(e){try{c(r.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ToastBridge=void 0;const i=n(754),{Toast:o}=i.Plugins;t.ToastBridge=class{show(e){return r(this,void 0,void 0,(function*(){if(!o)return Promise.reject("Toast not available.");yield o.show(e)}))}}}},t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(815)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,